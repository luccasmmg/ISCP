#lang sicp

(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item)
  (set-car! queue item))
(define (set-rear-ptr! queue item)
  (set-cdr! queue item))

(define (empty-queue? queue)
  (null? (front-ptr queue)))
;;(define (make-queue) (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue"
             queue)
      (car (front-ptr queue))))
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else (set-cdr! (rear-ptr queue)
                          new-pair)
                (set-rear-ptr! queue new-pair)
                queue))))
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! caled with empty queue"
                queue))
        (else (set-front-ptr!
               queue
               (cdr (front-ptr queue)))
              queue)))
(define (print-queue queue)
  (for-each display (front-ptr queue)))

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-queue?)
      (null? front-ptr))
    (define (print-queue)
      front-ptr)
    (define (front-queue)
      (if (empty-queue?)
          (error "FRONT called with an empty queue")
          front-ptr))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               (cons front-ptr rear-ptr))
              (else (set-cdr! rear-ptr
                              new-pair)
                    (set-rear-ptr! new-pair)
                    ))))
    (define (delete-queue!)
      (cond ((empty-queue?)
             (error "DELETE! caled with empty queue"
                    front-ptr))
            (else (set-front-ptr!
                   (cdr front-ptr)))))
    (define (dispatch m)
      (cond ((eq? 'insert m) insert-queue!)
            ((eq? 'delete m) delete-queue!)
            ((eq? 'print m) print-queue)))
    dispatch))
